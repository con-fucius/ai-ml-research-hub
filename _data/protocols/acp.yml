# The unique identifier for the protocol
id: acp

# --- Basic Information ---
name: "Agent Communication Protocol (ACP)"
officialUrl: "https://agentcommunicationprotocol.dev/"
beeaiDocsUrl: "https://docs.beeai.dev/concepts/acp-protocol"
githubUrl: "https://github.com/i-am-bee/acp"
ibmResearchUrl: "https://research.ibm.com/projects/agent-communication-protocol"
ibmThinkUrl: "https://www.ibm.com/think/topics/agent-communication-protocol"
apiDocsUrl: "https://agentcommunicationprotocol.dev/api/#/Runs/post_runs"
mcpBridgeUrl: "https://agentcommunicationprotocol.dev/guides/mcp-bridge"
agentSchemaUrl: "https://github.com/i-am-bee/acp/blob/main/schema/agent.json"
routerExampleUrl: "https://github.com/i-am-bee/acp/tree/main/examples/router"
arxivSurveyUrl: "https://arxiv.org/abs/2505.02279"
summary: "IBM's Linux Foundation protocol for REST-first agent communication using HTTPS + OpenAPI 3.1, supporting multimodal messaging, stateful/stateless sessions, streaming via SSE, and enterprise security with OAuth2/mTLS authentication."

# --- Key Features ---
features:
  - title: "REST-First Architecture"
    description: "Plain HTTPS + OpenAPI 3.1 spec with no custom transport - works with curl, Postman, or any HTTP client."
  - title: "Agent Discovery Manifest"
    description: "Static /.well-known/agent.json with name, version, capabilities, auth, and endpoints - works offline in containers."
  - title: "Multimodal Message Parts"
    description: "Message → MessagePart array supporting text/plain, image/png, application/json, and custom MIME types out-of-box."
  - title: "Flexible Session Patterns"
    description: "Stateless one-shot POST /runs or stateful sessions with sessionId and Redis/PostgreSQL persistence."
  - title: "Streaming & Async Support"
    description: "SSE streaming with status, delta, and artifact events; async by default with DELETE /runs/{runId} cancellation."
  - title: "Enterprise Security"
    description: "TLS 1.3 mandatory, API key/OAuth2/mTLS/JWT auth, RBAC in token claims, Linux Foundation governance."

# --- Use Cases ---
useCases:
  - "RAG pipelines - Retrieval agent → generation agent via ACP streaming with swappable LLMs"
  - "Edge/IoT mesh - Lightweight ARM device agents with mDNS + .well-known discovery"
  - "Enterprise B2B - Finance agent in Bank-A calls compliance agent in Bank-B via scoped JWT + mTLS"
  - "Agent marketplace - BeeAI Hub publishing, discovery, rating, and forking of agent manifests"
  - "Router/composition patterns - Downstream ACP agent orchestration with artifact merging"

# --- Pros & Cons ---
advantages:
  - "Zero-vendor REST spec compatible with any HTTP stack"
  - "Multimodal, async-first design with offline discovery capabilities"
  - "Native interoperability with MCP, A2A, and ANP protocols"
  - "Type-safe clients via SDKs + OpenAPI code generation"
  - "Linux Foundation governance with public bi-weekly SIG calls"

disadvantages:
  - "Orchestration logic (retries, sagas) left to developer implementation"
  - "Initial manifest and authentication setup requires boilerplate work"
  - "Spec still evolving with potential breaking changes <1% per minor version"
  - "Security configuration (certs, tokens) requires rigorous setup"

# --- Architecture & Core Concepts ---
architecture:
  - title: "Message Model"
    description: "Core Message → MessagePart[] array with contentType, content, contentUrl, and metadata fields"
  - title: "Discovery Schema"
    description: "Static /.well-known/agent.json with name, version, capabilities, auth, and endpoints configuration"
  - title: "Session Management"
    description: "Stateless POST /runs or stateful sessions with sessionId and backend persistence options"
  - title: "Streaming Protocol"
    description: "Accept: text/event-stream for SSE with status, delta, artifact events and DELETE cancellation"
  - title: "Security Layer"
    description: "TLS 1.3 transport, API key/OAuth2/mTLS/JWT auth, RBAC claims, Linux Foundation governance"

# --- Timeline Events ---
timeline:
  - date: "2025-02-01"
    type: "Announcement"
    title: "IBM Research Launch"
    description: "Announced by IBM Research as part of BeeAI platform initiative"
  - date: "2025-03-12"
    type: "Open Source"
    title: "Linux Foundation Donation"
    description: "Donated to Linux Foundation under Apache 2.0 license for community governance"
  - date: "2025-04-01"
    type: "SDK Release"
    title: "Python & TypeScript SDKs 1.0"
    description: "Python and TypeScript SDKs hit 1.0; adapters ship for LangChain 0.2, CrewAI 0.30, Smolagents 0.1"
  - date: "2025-05-04"
    type: "Research"
    title: "Academic Survey Coverage"
    description: "Featured in peer-reviewed 'A Survey of Agent Interoperability Protocols' (arXiv:2505.02279)"
  - date: "2025-07-01"
    type: "Preview"
    title: "Java & Go SDKs Preview"
    description: "Java and Go SDKs enter public preview on sdk-java and sdk-go branches"

# --- Future Outlook ---
roadmap:
  - title: "Choreography DSL"
    description: "YAML-based workflow choreography language for complex agent interactions"
    status: "Target Q3 2025"
  - title: "Distributed Tracing"
    description: "W3C Trace Context support for end-to-end observability across agent calls"
    status: "Target Q3 2025"
  - title: "Marketplace Smart Contracts"
    description: "did:wba bindings for decentralized agent marketplace transactions"
    status: "Target Q4 2025"
  - title: "Java & Go SDK GA"
    description: "General availability of Java and Go SDKs with full feature parity"
    status: "Target Q4 2025"

# --- SDK & Integration Status ---
integrations:
  - name: "Python SDK"
    version: "1.1.0"
    status: "GA"
  - name: "TypeScript SDK"
    version: "1.0.3"
    status: "GA"
  - name: "Java SDK"
    version: "0.9-preview"
    status: "Preview"
  - name: "Go SDK"
    version: "0.8-preview"
    status: "Preview"
  - name: "LangChain"
    package: "langchain-acp"
    version: "≥0.2.15"
  - name: "CrewAI"
    package: "@crewai/acp"
    status: "Native"
  - name: "Smolagents"
    package: "smolagents[acp]"
    version: "0.1+"

# --- Code Examples ---
codeSnippets:
  - title: "Minimal Echo Agent"
    language: "python"
    code: |
      from acp_sdk.server import Server, Message, MessagePart
      
      srv = Server()
      
      @srv.agent()
      async def echo(messages: list[Message]):
          last = messages[-1].parts[0].content
          return [Message(parts=[MessagePart(content=f"ECHO: {last}")])]
      
      if __name__ == "__main__":
          srv.run(host="0.0.0.0", port=8000)
  - title: "Agent Invocation"
    language: "bash"
    code: |
      curl -X POST http://localhost:8000/runs \
        -H "Content-Type: application/json" \
        -d '{"agent_name":"echo","input":[{"parts":[{"content":"Hi"}]}]}'
  - title: "Agent Discovery Manifest"
    language: "json"
    code: |
      // https://host/.well-known/agent.json
      {
        "name": "data-processor",
        "version": "1.0.0",
        "capabilities": ["text-analysis", "data-transformation"],
        "auth": "oauth2",
        "endpoints": {
          "runs": "/runs",
          "status": "/runs/{runId}/status"
        }
      }
  - title: "Multimodal Message Structure"
    language: "json"
    code: |
      {
        "agent_name": "multimodal-processor",
        "input": [
          {
            "parts": [
              {
                "contentType": "text/plain",
                "content": "Analyze this image",
                "metadata": {}
              },
              {
                "contentType": "image/png",
                "contentUrl": "https://example.com/image.png",
                "metadata": {"source": "user_upload"}
              }
            ]
          }
        ]
      }